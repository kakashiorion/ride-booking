// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id             Int            @id @default(autoincrement())
  phone          String         @unique
  loginOTP       Int?
  email          String?
  name           String
  inTrip         Boolean        @default(false)
  trips          Trip[]
  ratings        Int[]          @default([])
  savedAddresses SavedAddress[]
  currentLat     Float?
  currentLong    Float?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model SavedAddress {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  name       String
  lat        Float
  long       Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Driver {
  id                Int         @id @default(autoincrement())
  phone             String      @unique
  loginOTP          Int?
  email             String?
  name              String
  inTrip            Boolean     @default(false)
  online            Boolean     @default(false)
  acceptedTrips     Trip[]      @relation(name: "accepted")
  requestedForTrips Trip[]      @relation(name: "requested")
  ratings           Int[]       @default([])
  vehicleName       String
  vehicleNumber     String
  vehicleType       VehicleType @default(CAR)
  upiID             String?
  currentLat        Float?
  currentLong       Float?
  chargePerKm       Float       @default(10.0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Trip {
  id                      Int        @id @default(autoincrement())
  customer                Customer   @relation(fields: [customerId], references: [id])
  customerId              Int
  driver                  Driver?    @relation(name: "accepted", fields: [driverId], references: [id])
  driverId                Int?
  tripOTP                 Int?
  requestedDrivers        Driver[]   @relation(name: "requested")
  sourceLat               Float
  sourceLong              Float
  destinationLat          Float
  destinationLong         Float
  currentLat              Float?
  currentLong             Float?
  actualDistanceTravelled Float?
  customerRating          Int?
  driverRating            Int?
  status                  TripStatus @default(SEARCHING)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
  acceptedAt              DateTime?
  arrivedAt               DateTime?
  startedAt               DateTime?
  durationInMins          Int?
}

enum TripStatus {
  SEARCHING
  REQUESTED
  ACCEPTED
  ARRIVED
  STARTED
  COMPLETED
  CANCELLED
}

enum VehicleType {
  CAR
  AUTO
  BIKE
}
